{"version":3,"sources":["img/vs.png","api/Api.js","components/MyCard.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_KEY","MyCard","match","useState","detail","setDetail","open","setOpen","handleClose","handleClick","id","url","fetch","then","response","json","catch","error","console","log","getMatchDetail","data","Card","style","marginTop","CardContent","Grid","container","justify","alignItems","variant","spacing","item","Typography","width","src","require","alt","CardActions","Button","onClick","unique_id","color","margin","Date","dateTimeGMT","toLocaleString","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","state","fontstyle","fontweight","matchstarted","score","DialogActions","Navbar","AppBar","position","Toolbar","IconButton","App","matches","setMatches","useEffect","getMatches","alert","className","sm","map","type","key","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f559d75f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vs.7c1eb6d6.png\";","const API_KEY=\"w6bRu99SPIMvayRUqcwGH5yd9ma2\";\r\n\r\n//get all the matches[upcoming matches]\r\n\r\nexport const getMatches=()=>{\r\n    const url=`https://cricapi.com/api/matches/?apikey=${API_KEY}`;\r\n\r\n    return fetch(url)\r\n    .then((response)=>response.json()).\r\n    catch((error)=>console.log(\"ERROR\",error))\r\n} \r\n\r\n// load match details\r\nexport const getMatchDetail=(id)=>{\r\n    const url=`https://cricapi.com/api/cricketScore/?apikey=${API_KEY}&unique_id=${id}`;\r\n    return fetch(url).then((response)=>response.json()).catch((error)=>console.log(\"ERROR\",error));\r\n}","import React, { Fragment, useState } from 'react';\r\nimport { Card, Typography,CardContent,CardActions,Button, Grid, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from \"@material-ui/core\";\r\nimport { getMatchDetail } from \"../api/Api\";\r\n\r\nconst MyCard=({match})=>{\r\n const [detail,setDetail]=useState({});\r\n const [open,setOpen]=useState(false);\r\n\r\n const handleClose=()=>{\r\n        setOpen(false)\r\n}\r\nconst hadleOpen=()=>{\r\n    setOpen(true)\r\n}\r\n\r\n    const handleClick=(id)=>{\r\n        getMatchDetail(id).then(data=>{\r\n            console.log(\"match data\",data)\r\n            setDetail(data);\r\n            hadleOpen();\r\n        })\r\n        .catch(error=>console.log(error))\r\n    }\r\n    const getMatchCard=()=>{\r\n        return(\r\n        <Card style={{marginTop:20}}>\r\n            <CardContent>\r\n                <Grid container justify=\"center\" alignItems=\"center\" variant=\"h6\" spacing=\"4\">\r\n                    <Grid item>\r\n                        <Typography>{match[\"team-1\"]}</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                    <img style={{width:60}} src={require(\"../img/vs.png\")} alt=\" \"/>\r\n                        </Grid>\r\n                        <Grid item>\r\n                        <Typography>{match[\"team-2\"]}</Typography>\r\n                        </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n            <CardActions>\r\n                <Grid container justify=\"center\">\r\n                <Button onClick={()=>{\r\n                    handleClick(match.unique_id)\r\n                }}\r\n                 item variant=\"contained\" color=\"primary\" >\r\n                    Show Details\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"primary\" spacing=\"2\" style={{margin:5}}>\r\n                    Start time{new Date(match.dateTimeGMT).toLocaleString()}\r\n                </Button>\r\n                </Grid>\r\n            </CardActions>\r\n        </Card>)\r\n    }\r\n    const getDialog=()=>(\r\n        <Dialog open={open} onClose={handleClose}>\r\n            <DialogTitle id=\"alert-dialog-title\">{\"matchDetail\"}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        <Typography>{detail.state}</Typography>\r\n                        <Typography>\r\n                            match\r\n                            <span style={{fontstyle:\"italic\",fontweight:\"bold\"}}>\r\n                            {match.matchstarted?\" match started\":\" still not started\"}\r\n                            {detail.score}\r\n                            </span>\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                </DialogActions>\r\n        </Dialog>\r\n    )\r\n    \r\n    return (\r\n        <Fragment>\r\n            {getMatchCard()}\r\n            {getDialog()}\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default MyCard;","import { AppBar, IconButton, Menu, Toolbar, Typography } from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport React from \"react\";\r\nconst Navbar=()=>{\r\n\r\n    return(\r\n        <AppBar position=\"static\">\r\n        <Toolbar>\r\n        <IconButton color=\"inherit\">\r\n            <MenuIcon/>\r\n        </IconButton>\r\n            <Typography variant=\"h6\">Live Score</Typography>\r\n        </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\nexport default Navbar;","\nimport React, { Fragment, useState } from 'react';\nimport './App.css';\nimport {useEffect} from 'react';\nimport MyCard from './components/MyCard';\nimport Navbar from './components/Navbar';\nimport {getMatches} from './api/Api';\nimport { Card, Typography,CardContent,CardActions,Button, Grid } from \"@material-ui/core\";\nfunction App() {\n\n  const [matches,setMatches]=useState([]);\n  useEffect(() => {\n      getMatches()\n      .then((data)=>{\n        setMatches(data.matches)\n        console.log(data.matches)\n      })\n      .catch((error)=>alert(\"could not load data\"));\n    }, [])\n  return (\n    <div className=\"App\">\n      <Navbar></Navbar>\n       <Typography variant=\"h4\" style={{marginTop:20}}>Welcome to live score app</Typography>\n       \n         <Grid container>\n         <Grid sm=\"2\"></Grid>\n          \n         <Grid sm=\"8\">\n         {\n            matches.map((match)=>(\n           <Fragment>\n             {\n               match.type===\"Twenty20\" ?\n               (<MyCard key={match.unique_id} match={match} />) :\"\"\n             }\n           </Fragment>\n         ))\n           }\n         </Grid>\n         </Grid>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}